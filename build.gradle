buildscript {
    repositories {
        maven { url = "https://files.minecraftforge.net/maven" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
    }
}
allprojects {
    repositories {
        maven{ url 'http://maven.aliyun.com/nexus/content/groups/public/'}
    }
}
apply plugin: 'net.minecraftforge.gradle.forge'
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = "1.4.6"
group = "com.github.gdenga.vexmusic" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "VexMusic"

sourceCompatibility = targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileJava {
    sourceCompatibility = targetCompatibility = '1.8'
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

minecraft {
    version = "1.12.2-14.23.5.2847"
    runDir = "run"
    
    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
}

configurations {
    shade
    compile.extendsFrom(shade)
}

dependencies {
    // https://mvnrepository.com/artifact/org.jsoup/jsoup
    compile group: 'org.jsoup', name: 'jsoup', version: '1.13.1'

// https://mvnrepository.com/artifact/org.bytedeco/ffmpeg-platform
    //compile group: 'org.bytedeco', name: 'ffmpeg-platform', version: '4.2.1-1.5.2'

// https://mvnrepository.com/artifact/org.bytedeco/javacv
    //compile group: 'org.bytedeco', name: 'javacv', version: '1.4.4'

    compile fileTree(dir: 'libs', include: ['*.jar'])
}

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        configurations.runtime.collect {
            it.isDirectory() ? it : zipTree(it)
        }
        fileTree(dir: 'libs', include: ['*.jar']).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
